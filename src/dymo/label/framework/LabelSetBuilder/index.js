/** LabelSetBuilder class
 // LabelSetBuilder is used to create a label-set to print multiple label in one print job.
 // LabelSet is a collection of records. Each record contains pairs of object name and object text data/content.
 // The data of each record are applied to all correspond objects and for each record one label is printed.
 @constructor
 @export
 */
import LabelSetRecord from '../LabelSetRecord';
import { TextMarkupTag } from '../../../../settings';
import dymo from '../../../index';

class LabelSetBuilder {
  constructor () {
    /**
     @private
     */
    this._records = [];
  }

  /** Returns label set records
   @export
   @return {Array.<ILabelSetRecord>}
   */
  getRecords () {
    return this._records;
  }

  /** Adds a new record to the label-set
   // Returns created record object
   @export
   @return {ILabelSetRecord}
   */
  addRecord () {
    const record = new LabelSetRecord();
    this._records.push(record);

    // noinspection JSValidateTypes
    return record;
  }

  /** Converts the builder to a xml string
   @override
   */
  toString () {
    return LabelSetBuilder.toXml(this._records);
  }

  /** Convert record objects into xml format defined in LabelSet.xsd
   // Returned xml can be passed to dymo.label.framework.printLabel() as labelSetXml parameter.
   // Parameters:
   //      records - records to convert to xml. records should be array-like object of associative-arrays with object names as keys and object text as values.
   // Return string contains xml data
   // Note: this function can be used independent of other LabelSetBuilder methods if records data is generated by other functions

   @export
   @param {Array.<Object.<string, string>>} records
   */
  static toXml(records) {
    // create xml representation of LabelSet
    // records is an Array-like object of associative arrays of object name/object value pairs

    const doc = dymo.xml.parse('<LabelSet/>');
    const root = doc.documentElement;

    for (let i = 0; i < records.length; i++) {
      const record = records[i];

      const recordElem = doc.createElement('LabelRecord');

      for (const objectName in record) {
        let objectValue = record[objectName];
        if (typeof objectValue === 'function') continue;

        objectValue = objectValue.toString();

        const objectElem = doc.createElement('ObjectData');
        objectElem.setAttribute('Name', objectName);

        if (objectValue.indexOf(TextMarkupTag) == 0) {
          // parse the markup into xml and insert it as is
          const markupDoc = dymo.xml.parse(objectValue);
          objectElem.appendChild(markupDoc.documentElement.cloneNode(true));
        } else {
          const textNode = doc.createTextNode(objectValue);
          objectElem.appendChild(textNode);
        }
        recordElem.appendChild(objectElem);
      }

      root.appendChild(recordElem);
    }

    return dymo.xml.serialize(doc);
  }
}

export default LabelSetBuilder;
