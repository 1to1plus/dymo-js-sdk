/** LabelSetBuilder class
 // LabelSetBuilder is used to create a label-set to print multiple label in one print job.
 // LabelSet is a collection of records. Each record contains pairs of object name and object text data/content.
 // The data of each record is applied to all corresponded objects, and for each record one label is printed.
 */
import LabelSetRecord from '../LabelSetRecord';
import { TextMarkupTag } from '../../../../settings';
import dymo from '../../../index';

class LabelSetBuilder {
  public _records: any[];

  public _recordLength: number;

  public length: number;

  constructor() {
    /**
     @private
     */
    this._records = [];
    this._recordLength = 0;
    this.length = 0;
  }

  addRecord() {
    const record = new LabelSetRecord();
    this._records.push(record);
    this._recordLength = this._records.length;
    this.length = this._records.length;

    // noinspection JSValidateTypes
    return record;
  }

  /** Converts the builder to an xml string
   @override
   */
  toString() {
    return LabelSetBuilder.toXml(this._records);
  }

  /** Convert record objects into xml format defined in LabelSet.xsd
   // Returned xml can be passed to dymo.label.framework.printLabel() as labelSetXml parameter.
   // Parameters:
   // records - records to convert to xml.
   // records should be array-like object of associative-arrays with object names as keys and object text as values.
   // Return string contains xml data
   // Note:
   // this function can be used independent of other LabelSetBuilder methods
   // if records data is generated by other functions
   */
  static toXml(records: any[]) {
    // create xml representation of LabelSet
    // records is an Array-like object of associative arrays of object name/object value pairs

    const doc = dymo.xml.parse('<LabelSet/>');
    const root = doc.documentElement;

    for (let i = 0; i < records.length; i++) {
      const record = records[i];

      const recordElem = doc.createElement('LabelRecord');

      for (const objectName in record) {
        let objectValue = record[objectName];
        if (typeof objectValue === 'function') continue;

        objectValue = objectValue.toString();

        const objectElem = doc.createElement('ObjectData');
        objectElem.setAttribute('Name', objectName);

        if (objectValue.indexOf(TextMarkupTag) == 0) {
          // parse the markup into xml and insert it as is
          const markupDoc = dymo.xml.parse(objectValue);
          objectElem.appendChild(markupDoc.documentElement.cloneNode(true));
        } else {
          const textNode = doc.createTextNode(objectValue);
          objectElem.appendChild(textNode);
        }
        recordElem.appendChild(objectElem);
      }

      root.appendChild(recordElem);
    }

    return dymo.xml.serialize(doc);
  }
}

export default LabelSetBuilder;
