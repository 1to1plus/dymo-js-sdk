/** LabelSetBuilder class
 // LabelSetBuilder is used to create a label-set to print multiple label in one print job.
 // LabelSet is a collection of records. Each record contains pairs of object name and object text data/content.
 // The data of each record are applied to all corresponend objects and for each record one label is printed.
 @constructor
 @export
 */
import LabelSetRecord from '../LabelSetRecord'
import { TextMarkupTag } from '../../../../settings'
import dymo from '../../../index'

const LabelSetBuilder = function () {
  /**
   @private
   */
  this._records = []
}

/** Returns label set records
 @export
 @return {Array.<ILabelSetRecord>}
 */
LabelSetBuilder.prototype.getRecords = function () {
  return this._records
}

/** Adds a new record to the label-set
 // Returns created record object
 @export
 @return {ILabelSetRecord}
 */
LabelSetBuilder.prototype.addRecord = function () {
  let record = new LabelSetRecord()
  this._records.push(record)

  // noinspection JSValidateTypes
  return record
}

/** Convert record objects into xml format defined in LabelSet.xsd
 // Returned xml can be passed to dymo.label.framefork.printLabel() as labelSetXml parameter.
 // Parameters:
 //      records - records to convert to xml. records should be array-like object of associative-arrays with object names as keys and object text as values.
 // Return string contains xml data
 // Note: this function can be used independed of other LabelSetBuilder methods if records data is generated by other functions

 @export
 @param {Array.<Object.<string, string>>} records
 */
LabelSetBuilder.toXml = function (records) {
  // create xml representation of LabelSet
  // records is a Array-like object of associative arrays of object name/object value pairs

  let doc = dymo.xml.parse('<LabelSet/>')
  let root = doc.documentElement

  for (let i = 0; i < records.length; i++) {
    let record = records[i]

    let recordElem = doc.createElement('LabelRecord')

    for (let objectName in record) {
      let objectValue = record[objectName]
      if (typeof objectValue == 'function')
        continue

      objectValue = objectValue.toString()

      let objectElem = doc.createElement('ObjectData')
      objectElem.setAttribute('Name', objectName)

      if (objectValue.indexOf(TextMarkupTag) == 0) {
        // parse the markup into xml and insert it as is
        let markupDoc = dymo.xml.parse(objectValue)
        objectElem.appendChild(markupDoc.documentElement.cloneNode(true))
      } else {
        let textNode = doc.createTextNode(objectValue)
        objectElem.appendChild(textNode)
      }
      recordElem.appendChild(objectElem)
    }

    root.appendChild(recordElem)
  }

  return dymo.xml.serialize(doc)
}

/** Converts the builder to an xml string
 @override
 */
LabelSetBuilder.prototype.toString = function () {
  return LabelSetBuilder.toXml(this._records)
}

export default LabelSetBuilder
